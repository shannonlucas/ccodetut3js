"use strict";(self.webpackChunktutorial=self.webpackChunktutorial||[]).push([[738],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||a;return n?o.createElement(m,r(r({ref:t},c),{},{components:n})):o.createElement(m,r({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<a;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7480:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var o=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],s={id:"setting-up-scene",title:"Setting up a scene",sidebar_position:1,sidebar_label:"Setting up a scene",toc_max_heading_level:2,keywords:["creative coding","graphics","javascript","three.js","3D","tutorial"]},l=void 0,u={unversionedId:"scene-setup/setting-up-scene",id:"scene-setup/setting-up-scene",title:"Setting up a scene",description:"In this module, you will build the foundation for the rest of the tutorial. This part isn't exciting, but it's necessary. What you build in this module will be useful when you begin experimenting on your own.",source:"@site/docs/scene-setup/index.mdx",sourceDirName:"scene-setup",slug:"/scene-setup/",permalink:"/ccodetut3js/scene-setup/",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"setting-up-scene",title:"Setting up a scene",sidebar_position:1,sidebar_label:"Setting up a scene",toc_max_heading_level:2,keywords:["creative coding","graphics","javascript","three.js","3D","tutorial"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ccodetut3js/"},next:{title:"Base code",permalink:"/ccodetut3js/scene-setup/base-code"}},c={},h=[{value:"3D scene basics",id:"3d-scene-basics",level:2},{value:"Meshes",id:"meshes",level:3},{value:"Lights",id:"lights",level:3},{value:"Camera",id:"camera",level:3},{value:"Scene container",id:"scene-container",level:3},{value:"Renderer",id:"renderer",level:3},{value:"Animation loop",id:"animation-loop",level:3},{value:"How to skip ahead",id:"how-to-skip-ahead",level:2}],p={toc:h};function d(e){var t=e.components,s=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this module, you will build the foundation for the rest of the tutorial. This part isn't exciting, but it's necessary. What you build in this module will be useful when you begin experimenting on your own."),(0,a.kt)("p",null,"When you complete this module, you will have a reusable template that you can use as the basis for future projects. After you've assembled these initial pieces, you will create a short demo with a rotating cube to verify that everything is working."),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Animation of a rotating cube produced by the demo at the end of this module",src:n(8987).Z,title:"This module's demo",width:"624",height:"332"})),(0,a.kt)("h2",{id:"3d-scene-basics"},"3D scene basics"),(0,a.kt)("p",null,"All three-dimensional graphics scenes have some core elements in common regardless of which graphics library you are using. You will learn about each of the concepts below in this module except for meshes, which are covered in the next module."),(0,a.kt)("h3",{id:"meshes"},"Meshes"),(0,a.kt)("p",null,"One or more meshes are needed to be the subject of the scene. These are the objects you want people to see when they look at what you've created. This could be something simple such as a single cube or a complex animation of many detailed objects."),(0,a.kt)("p",null,'Meshes are mathematical models of the things you want to show in your scene. They combine both the geometry of an object with the "material" or appearance of the object. The mesh also contains information about where the object is located in your scene and how it is oriented. Fortunately, the vast majority of the necessary math is handled for you by three.js.'),(0,a.kt)("p",null,"As noted above, you will learn more about meshes in the second module of this tutorial."),(0,a.kt)("h3",{id:"lights"},"Lights"),(0,a.kt)("p",null,"One or more light sources are needed so the objects in the scene will be visible. Lights can have colors and types (e.g., point lights and spotlights)."),(0,a.kt)("p",null,"Strictly speaking, lights are not required in a scene. There are situations where the absence of a light source can be used for artistic intent. For example, you could create a scene with a light background where all the objects appeared as silhouettes because there are no lights. It is also possible to create objects that glow."),(0,a.kt)("p",null,"These are things to experiment with as you continue to explore 3D graphics. For this tutorial, you will use two light sources."),(0,a.kt)("h3",{id:"camera"},"Camera"),(0,a.kt)("p",null,'The camera provides a view of the scene, and it works in a manner analogous to real world cameras. What the camera "sees" is what gets displayed on your display.'),(0,a.kt)("p",null,"There are many types of cameras, and you can even have more than one in a scene and switch between them. For this tutorial, we will use a single camera."),(0,a.kt)("h3",{id:"scene-container"},"Scene container"),(0,a.kt)("p",null,"When you create a 3D scene, there is an invisible container that holds everything you want to display (your meshes) and everything that affects that display (such as your lights and camera). An apt metaphor for this container is a theater stage."),(0,a.kt)("p",null,'This container is usually just called a "scene," and it\'s how your computer makes sense of the items on this stage.'),(0,a.kt)("h3",{id:"renderer"},"Renderer"),(0,a.kt)("p",null,"The renderer is what translates your 3D scene into pixels on your display. It is the bridge between the mathematical models of the objects in your scene and the hardware that generates images on your display."),(0,a.kt)("p",null,"In this tutorial, you will use a WebGL renderer. WebGL is a technology that web browsers use to display 3D graphics. Again, this is something that three.js takes care of for you."),(0,a.kt)("h3",{id:"animation-loop"},"Animation loop"),(0,a.kt)("p",null,"The animation loop is an activity that your computer carries out every time it updates the image on your display. With every update, your computer will ask your scene to perform any necessary updates and will then render a new version of your screen."),(0,a.kt)("p",null,"This process is akin to stop-motion animation used in film. A character model is set up, a picture is taken, the stage crew makes slight movements to the model, and takes a new picture. When these pictures are shown rapidly in sequence, the viewer sees an animated scene. The principle of the animation loop is similar, but it happens in real time."),(0,a.kt)("h2",{id:"how-to-skip-ahead"},"How to skip ahead"),(0,a.kt)("p",null,"If you would rather jump directly to the visuals and skip the construction of the foundation, you can do that. At the end of this module, you will find a ",(0,a.kt)("a",{parentName:"p",href:"/ccodetut3js/scene-setup/checkpoint"},"checkpoint")," for this module. That page contains the complete HTML, CSS, and JavaScript code that is built in this module. Copy and paste each code block into the appropriate panel of your code playground. You will then be ready to jump directly into the next module."),(0,a.kt)("p",null,"Return to this module when you are ready to review how this code was put together."))}d.isMDXComponent=!0},8987:function(e,t,n){t.Z=n.p+"assets/images/scene-setup-demo-72ae5178323b157c8953151b2222beff.gif"}}]);