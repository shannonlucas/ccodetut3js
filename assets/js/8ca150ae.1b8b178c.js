"use strict";(self.webpackChunktutorial=self.webpackChunktutorial||[]).push([[186],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=l(n),p=a,m=u["".concat(c,".").concat(p)]||u[p]||d[p]||i;return n?r.createElement(m,o(o({ref:t},h),{},{components:n})):r.createElement(m,o({ref:t},h))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},383:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"lights-camera-render",title:"Lights, camera, render",sidebar_position:3,sidebar_label:"Lights, camera, render",keywords:["creative coding","graphics","javascript","three.js","3D","tutorial"]},c=void 0,l={unversionedId:"scene-setup/lights-camera-render",id:"scene-setup/lights-camera-render",title:"Lights, camera, render",description:"The lights, camera, and renderer are the core functional parts your scene needs in order to render the objects you want your viewer to see.",source:"@site/docs/scene-setup/lights-camera-render.mdx",sourceDirName:"scene-setup",slug:"/scene-setup/lights-camera-render",permalink:"/ccodetut3js/scene-setup/lights-camera-render",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"lights-camera-render",title:"Lights, camera, render",sidebar_position:3,sidebar_label:"Lights, camera, render",keywords:["creative coding","graphics","javascript","three.js","3D","tutorial"]},sidebar:"tutorialSidebar",previous:{title:"Base code",permalink:"/ccodetut3js/scene-setup/base-code"},next:{title:"Putting it together",permalink:"/ccodetut3js/scene-setup/put-it-together"}},h={},d=[{value:"Adding lights to the scene",id:"adding-lights-to-the-scene",level:2},{value:"Adding the camera",id:"adding-the-camera",level:2},{value:"Setting up the renderer",id:"setting-up-the-renderer",level:2}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The lights, camera, and renderer are the core functional parts your scene needs in order to render the objects you want your viewer to see."),(0,i.kt)("h2",{id:"adding-lights-to-the-scene"},"Adding lights to the scene"),(0,i.kt)("p",null,"You need lights to make the objects in your scene visible. Otherwise, your scene will be completely dark."),(0,i.kt)("p",null,"The function below accepts a scene object (you will create one soon) and adds two ",(0,i.kt)("inlineCode",{parentName:"p"},"PointLight")," light sources to it. You can think of a point light as a candle: it shines equally in all directions."),(0,i.kt)("p",null,"The parameter being passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"PointLight")," is the color of the light. This must be a string with a hexadecimal color code as you would use in HTML or CSS. The first light, ",(0,i.kt)("inlineCode",{parentName:"p"},"light1")," is magenta, and ",(0,i.kt)("inlineCode",{parentName:"p"},"light2")," is cyan."),(0,i.kt)("p",null,"The lights are positioned using the ",(0,i.kt)("inlineCode",{parentName:"p"},".position.set")," method on each light. The ",(0,i.kt)("inlineCode",{parentName:"p"},".position.set")," method takes three parameters: the ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"z")," coordinates of the light. For now, they are positioned in an arbitrary fashion that will work for the project you are building in this tutorial."),(0,i.kt)("p",null,"Note that this function does not return anything since it adds the lights directly to the scene object you will pass to it as a parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function setUpLights(scene) {\n  const light1 = new THREE.PointLight("#ea00d9"); // magenta\n  light1.position.set(8, 3, 4);\n  scene.add(light1);\n\n  const light2 = new THREE.PointLight("#0abdc6"); // cyan\n  light2.position.set(-6, 0, 2);\n  scene.add(light2);\n}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Lights and background color")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When you copied the CSS for this tutorial, you may have noticed that the background color was not black."),(0,i.kt)("p",{parentName:"div"},"If your lights are in the wrong place, many (or all) of the objects in your scene might be in a shadow and will be rendered as black. If your background is also black, you won't be able to see them, and it might take you some time to figure out where the problem actually is. With a background that has a slight color, you will be able to see these objects as silhouettes against that color."),(0,i.kt)("p",{parentName:"div"},"When you start a new project, pick a background color other than black, even if you intend to have a black background in the finished scene."))),(0,i.kt)("h2",{id:"adding-the-camera"},"Adding the camera"),(0,i.kt)("p",null,'The camera is what "sees" your scene. What it sees is what gets rendered on your display. For this tutorial you will use a ',(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveCamera"),". This will cause objects to be rendered like they would appear in the real world: objects in the distance will appear smaller than objects that are closer."),(0,i.kt)("p",null,"Despite its short length, there are some important things happening in this function."),(0,i.kt)("p",null,"The first parameter that ",(0,i.kt)("inlineCode",{parentName:"p"},"PerspectiveCamera")," takes is the vertical field of view measured in degrees. Typical human vision has a vertical range of 150 degrees with a 60 degree vertical range for central vision. This camera is set to 75 degrees which provides a reasonable default for most scenes."),(0,i.kt)("p",null,"The second parameter is the aspect ratio. You may have seen this written as a ratio such as 16:9, 21:9, or 4:3 in the context of televisions or computer displays. In short, it's the ratio of a display's width to its height. The camera needs this information to make sure that a square object appears square on your display. The function computes the ratio by dividing your browser window's width by its height."),(0,i.kt)("p",null,"The last two parameters specify the closest distance to and farthest distance from the camera, respectively, that an object in the scene can be and still be visible. Three.js uses Standard International (SI) units. So in this case, the camera can see things as close as 10 centimeters and as far away as 1,000 meters."),(0,i.kt)("p",null,"The function then sets the camera to look at the center, or origin, of the scene. Finally, it returns the newly created camera object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function setUpCamera() {\n  const aspectRatio = window.innerWidth / window.innerHeight;\n  const camera = new THREE.PerspectiveCamera(75, aspectRatio, 0.1, 1000);\n  camera.lookAt(0, 0, 0);\n\n  return camera;\n}\n")),(0,i.kt)("h2",{id:"setting-up-the-renderer"},"Setting up the renderer"),(0,i.kt)("p",null,"The renderer is what actually converts your 3D scene into pixels on your display. You will use a ",(0,i.kt)("inlineCode",{parentName:"p"},"WebGLRenderer")," for this project. WebGL is a low-level programming interface supported by modern browsers. There are other types of renderers in three.js, but they are for specific, advanced use cases that aren't covered in this tutorial."),(0,i.kt)("p",null,"The function below accepts the ID of an HTML ",(0,i.kt)("inlineCode",{parentName:"p"},"<canvas>")," element as its only parameter. It then queries the HTML for that element and passes it to the renderer when you create it on the next line."),(0,i.kt)("p",null,"Note that one of the options passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"WebGLRenderer")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"alpha: true"),". This option tells the renderer to use a transparent background and allow the background color you specified in your CSS to show through. If you did not set this option, the background of the scene would be black."),(0,i.kt)("p",null,'The function then sets its size to fill the entire browser window. Setting the pixel ratio ensures that the image isn\'t blurry if you are using a high resolution display (HiDPI or "Retina" displays).'),(0,i.kt)("p",null,"Finally, the function returns the renderer object it created."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function setUpRenderer(elementId) {\n  const canvas = document.querySelector(elementId);\n  const renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true });\n\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  return renderer;\n}\n")))}p.isMDXComponent=!0}}]);